rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user has the 'admin' role
    function isAdmin() {
      let user = get(/databases/$(database)/documents/Users/$(request.auth.uid));
      return isAuthenticated() && 
             (user != null && (user.data.role == 'Admin' || user.data.isAdmin == true));
    }
    
    // Helper function to check if the user is on the Essential tier
    function isEssential() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/Users/$(request.auth.uid)).data.tier == "essential";
    }

    // Users collection: Users can read/write their own data
    match /users/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }

    // User management collection: General authenticated access
    match /Users/{userId} {
      allow read, write: if isAuthenticated();
    }

    // Seller management collection
    match /Sellers/{sellerId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }

    // Voices collection: Public read, admin-only write
    match /voices/{voiceId} {
      allow read: if true;
      allow write: if isAuthenticated() && isAdmin();
    }

    // Scenarios collection: Public read, authenticated write
    match /Scenarios/{scenarioId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }

    // PublicData collection: All authenticated users can read
    match /publicData/{document=**} {
      allow read: if isAuthenticated();
    }

    // ProtectedData collection: Only Essential tier users can read
    match /protectedData/{document=**} {
      allow read: if isEssential();
    }

    // Conversations collection: General access for authenticated users
    match /Conversations/{conversationId} {
      allow create: if isAuthenticated();
      allow read, update, delete: if isAuthenticated();
    }

    // Add the following rule for the Modals collection
    match /Modals/{modalId} {
      allow read: if request.auth != null;
      allow write: if false; // Restrict write access
    }

    // PendingUsers collection: Allow read for authentication process
    match /PendingUsers/{userId} {
      allow read: if true;
      allow delete: if request.auth != null;
    }

   
    match /PaymentFailed/{docId} {
      allow read: if true;  // Allow public read access
      allow list: if true;  // Allow querying
      allow write: if false; // Only allow writes through admin/backend
    }

    // TrialEnded collection: Allow public read access with email query
    match /TrialEnded/{docId} {
      allow read: if true;  // Allow public read access
      allow list: if true;  // Allow querying
      allow write: if false; // Only allow writes through admin/backend
    }
  }
}

